# Generated by Django 3.2 on 2021-05-02 23:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CCTSAssistanceRequired',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
            options={
                'verbose_name': 'CCTS Assistance Required',
                'verbose_name_plural': 'CCTS Assistance Required',
            },
        ),
        migrations.CreateModel(
            name='ClosingLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='ComplaintLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
            options={
                'verbose_name': 'Complaint Language',
                'verbose_name_plural': 'Complaint Language',
            },
        ),
        migrations.CreateModel(
            name='CustomerAssistanceRequired',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=5)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
            options={
                'verbose_name': 'Customer Assistance Required',
                'verbose_name_plural': 'Customer Assistance Required',
            },
        ),
        migrations.CreateModel(
            name='ObjectionAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
            options={
                'verbose_name': 'Objection Assessment',
                'verbose_name_plural': 'Objection Assessment',
            },
        ),
        migrations.CreateModel(
            name='ObjectionStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
            options={
                'verbose_name': 'Objection Status',
                'verbose_name_plural': 'Objection Status',
            },
        ),
        migrations.CreateModel(
            name='ReferencedCodeSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='StatusNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(choices=[(True, True), (False, False)], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Objection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complaint_id', models.CharField(max_length=10)),
                ('date_submitted', models.DateTimeField()),
                ('date_processing_start', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('date_processing_end', models.DateTimeField(blank=True, null=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.agent')),
                ('ccts_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.objectionassessment')),
                ('ccts_assistance_required', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.cctsassistancerequired')),
                ('ccts_determination_referenced_code_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ReferencedCodeSectionCCTS', to='objections.referencedcodesection')),
                ('closing_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.closinglevel')),
                ('complaint_language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.complaintlanguage')),
                ('customer_assistance_required', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.customerassistancerequired')),
                ('objection_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.objectionstatus')),
                ('psp_objection_referenced_code_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ReferencedCodeSectionPSP', to='objections.referencedcodesection')),
                ('service_provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.serviceprovider')),
                ('status_note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='objections.statusnote')),
            ],
        ),
    ]
